/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package allomanykivalaxto.resources;

import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.common.PDRectangle;
import org.apache.pdfbox.pdmodel.font.PDFont;
import org.apache.pdfbox.pdmodel.font.PDType1Font;

/**
 *
 * @author ploszt
 */
public class AllomanyKivalaxto extends javax.swing.JFrame {
    static final String X_TETEL      = "TETEL";
    static final String X_PDFNEV     = "PDF_FILE_NEV";
    static final String X_ID         = "ID";
    static final String X_ELONEV     = "JV_ELONEV";
    static final String X_CSNEV      = "JV_CSNEV";
    static final String X_KNEV       = "JV_KNEV";
    static final String X_UNEV       = "JV_UNEV";
    static final String X_SZULCSNEV  = "JV_SZULCSNEV";
    static final String X_SZULKNEV   = "JV_SZULKNEV";
    static final String X_SZULUNEV   = "JV_SZULUNEV";
    static final String X_SZULIDO    = "JV_SZULIDO";
    static final String X_SZULHELY   = "JV_SZULHELY";
    static final String X_ANYJACSNEV = "JV_ANYJACSNEV";
    static final String X_ANYJAKNEV  = "JV_ANYJAKNEV";
    static final String X_ANYJAUNEV  = "JV_ANYJAUNEV";
    static final String X_ADOAZON    = "JV_ADOAZON";

    private String allomanyNeve;
    private String allomanyNeve2;
    private String allomanyOsveny;
    /**
     * Creates new form AllomanyKivalaxto
     */
    public AllomanyKivalaxto() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        jMegnyit = new javax.swing.JButton();
        jKilepes = new javax.swing.JButton();
        formattedText = new javax.swing.JFormattedTextField();

        fileChooser.setDialogTitle("Válassza ki az XML-t!");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("java, JSP és JSF ismeretek frissítése P.T.");

        jMegnyit.setText("Állomány kiválasztás");
        jMegnyit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMegnyitActionPerformed(evt);
            }
        });

        jKilepes.setLabel("Kilépés");
        jKilepes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jKilepesActionPerformed(evt);
            }
        });

        formattedText.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jMegnyit)
                .addGap(18, 18, 18)
                .addComponent(formattedText, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jKilepes)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jMegnyit)
                    .addComponent(jKilepes)
                    .addComponent(formattedText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(246, 246, 246))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMegnyitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMegnyitActionPerformed
 int returnVal = fileChooser.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
        File file = fileChooser.getSelectedFile();
        allomanyNeve = file.getName();
        allomanyOsveny = file.getAbsolutePath();
        allomanyOsveny = allomanyOsveny.substring(0, allomanyOsveny.length()-allomanyNeve.length());
        allomanyNeve2 = allomanyNeve.substring(0,allomanyNeve.length()-4);
      
//        formattedText.setText(allomanyOsveny);
       
        try {
          // What to do with the file, e.g. display it in a TextArea
//          textarea.read( new FileReader( file.getAbsolutePath() ), null );
            formattedText.setText("Feldolgozás folyamatban...");
            jKilepes.setEnabled(false);
            xmlolvas_xlsir(file.getAbsolutePath(), allomanyOsveny, allomanyNeve2.concat(".xls"));
            formattedText.setText("A feldolgozás befejeződött.");
            jKilepes.setEnabled(true);
        } catch (IOException ex) {
          System.out.println("Probléma a "+file.getAbsolutePath());
        }
    } else {
        System.out.println("Nem választott állományt a felhasználó.");
    }
    }//GEN-LAST:event_jMegnyitActionPerformed

    private static void xmlolvas_xlsir(String allomanyNev, String allomanyDir, String xlsAllomany) throws IOException
    {
    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
    DocumentBuilder db;
    Document doc = null;
    String xId;
    String xPdfNev;
    String xEloNev;
    String xCsNev;
    String xKNev;
    String xUNev;
    String xSzulCsNev;
    String xSzulKNev;
    String xSzulUNev;
    String xSzulIdo;
    String xSzulHely;
    String xAnyjaCsNev;
    String xAnyjaKNev;
    String xAnyjaUNev;
    String xAdoazon;
    int rowCount = 0;
    int colCount = 0;
    int fontSize = 8;
    float leading = 1.5f * fontSize;
    float innen = 0;
    try { 
        
    db = dbf.newDocumentBuilder();
    doc = db.parse(new File(allomanyNev));
//    System.out.println(allomanyNev);    
        } catch (SAXException e) {
            System.out.println("SAXException error: "+e.getMessage());
            doc = null;
            return;

        } catch (ParserConfigurationException e) {
            System.out.println("XML-parser error: "+e.getMessage());
            doc = null;
            return;
        }
    
        HSSFWorkbook workbook = new HSSFWorkbook();
        Sheet sheet = workbook.createSheet("M30 Valami");

        	CellStyle cellStyle = sheet.getWorkbook().createCellStyle();
		Font font = sheet.getWorkbook().createFont();
		font.setBold(true);
		font.setFontHeightInPoints((short) 16);
                font.setFontName("Courier");
		cellStyle.setFont(font);
				
		Row row = sheet.createRow(rowCount++);

                Cell cell = row.createCell(colCount++);
		cell.setCellStyle(cellStyle);
		cell.setCellValue(X_ID);
		
		cell = row.createCell(colCount++);
                cell.setCellStyle(cellStyle);
		cell.setCellValue(X_PDFNEV);
		
		cell = row.createCell(colCount++);
		cell.setCellStyle(cellStyle);
		cell.setCellValue(X_ELONEV);

		cell = row.createCell(colCount++);
		cell.setCellStyle(cellStyle);
		cell.setCellValue(X_CSNEV);

		cell = row.createCell(colCount++);
		cell.setCellStyle(cellStyle);
		cell.setCellValue(X_KNEV);

		cell = row.createCell(colCount++);
		cell.setCellStyle(cellStyle);
		cell.setCellValue(X_UNEV);

		cell = row.createCell(colCount++);
		cell.setCellStyle(cellStyle);
		cell.setCellValue(X_SZULCSNEV);

		cell = row.createCell(colCount++);
		cell.setCellStyle(cellStyle);
		cell.setCellValue(X_SZULKNEV);

		cell = row.createCell(colCount++);
		cell.setCellStyle(cellStyle);
		cell.setCellValue(X_SZULUNEV);

		cell = row.createCell(colCount++);
		cell.setCellStyle(cellStyle);
		cell.setCellValue(X_SZULIDO);

		cell = row.createCell(colCount++);
		cell.setCellStyle(cellStyle);
		cell.setCellValue(X_SZULHELY);

		cell = row.createCell(colCount++);
		cell.setCellStyle(cellStyle);
		cell.setCellValue(X_ANYJACSNEV);

		cell = row.createCell(colCount++);
		cell.setCellStyle(cellStyle);
		cell.setCellValue(X_ANYJAKNEV);

		cell = row.createCell(colCount++);
		cell.setCellStyle(cellStyle);
		cell.setCellValue(X_ANYJAUNEV);

		cell = row.createCell(colCount++);
		cell.setCellStyle(cellStyle);
		cell.setCellValue(X_ADOAZON);


                
//            try (FileOutputStream outputStream = new FileOutputStream(allomanyDir.concat(xlsAllomany))) {
//			workbook.write(outputStream);
//		}		

        
    NodeList nList = doc.getElementsByTagName(X_TETEL);
    
    for (int temp = 0; temp < nList.getLength(); temp++)
{
 Node node = nList.item(temp);
 //System.out.println("");    //Just a separator
 if (node.getNodeType() == Node.ELEMENT_NODE)
 {
    Element eElement = (Element) node;
    xId = eElement.getElementsByTagName(X_ID).item(0).getTextContent();
    xPdfNev = eElement.getElementsByTagName(X_PDFNEV).item(0).getTextContent();
    xEloNev = eElement.getElementsByTagName(X_ELONEV).item(0).getTextContent();
    xCsNev = eElement.getElementsByTagName(X_CSNEV).item(0).getTextContent();
    xKNev = eElement.getElementsByTagName(X_KNEV).item(0).getTextContent();
    xUNev = eElement.getElementsByTagName(X_UNEV).item(0).getTextContent();
    xSzulCsNev = eElement.getElementsByTagName(X_SZULCSNEV).item(0).getTextContent();
    xSzulKNev = eElement.getElementsByTagName(X_SZULKNEV).item(0).getTextContent();
    xSzulUNev = eElement.getElementsByTagName(X_SZULUNEV).item(0).getTextContent();
    xSzulIdo = eElement.getElementsByTagName(X_SZULIDO).item(0).getTextContent();
    xSzulHely = eElement.getElementsByTagName(X_SZULHELY).item(0).getTextContent();
    xAnyjaCsNev = eElement.getElementsByTagName(X_ANYJACSNEV).item(0).getTextContent();
    xAnyjaKNev = eElement.getElementsByTagName(X_ANYJAKNEV).item(0).getTextContent();
    xAnyjaUNev = eElement.getElementsByTagName(X_ANYJAUNEV).item(0).getTextContent();
    xAdoazon = eElement.getElementsByTagName(X_ADOAZON).item(0).getTextContent();

		font.setFontHeightInPoints((short) 14);
		cellStyle.setFont(font);
            colCount = 0;
            row = sheet.createRow(rowCount++);

                cell = row.createCell(colCount++);
		cell.setCellStyle(cellStyle);
		cell.setCellValue(xId);
		
		cell = row.createCell(colCount++);
                cell.setCellStyle(cellStyle);
		cell.setCellValue(xPdfNev);
		
		cell = row.createCell(colCount++);
		cell.setCellStyle(cellStyle);
		cell.setCellValue(xEloNev);

		cell = row.createCell(colCount++);
		cell.setCellStyle(cellStyle);
		cell.setCellValue(xCsNev);

		cell = row.createCell(colCount++);
		cell.setCellStyle(cellStyle);
		cell.setCellValue(xKNev);

		cell = row.createCell(colCount++);
		cell.setCellStyle(cellStyle);
		cell.setCellValue(xUNev);

		cell = row.createCell(colCount++);
		cell.setCellStyle(cellStyle);
		cell.setCellValue(xSzulCsNev);

		cell = row.createCell(colCount++);
		cell.setCellStyle(cellStyle);
		cell.setCellValue(xSzulKNev);

		cell = row.createCell(colCount++);
		cell.setCellStyle(cellStyle);
		cell.setCellValue(xSzulUNev);

		cell = row.createCell(colCount++);
		cell.setCellStyle(cellStyle);
		cell.setCellValue(xSzulIdo);

		cell = row.createCell(colCount++);
		cell.setCellStyle(cellStyle);
		cell.setCellValue(xSzulHely);

		cell = row.createCell(colCount++);
		cell.setCellStyle(cellStyle);
		cell.setCellValue(xAnyjaCsNev);

		cell = row.createCell(colCount++);
		cell.setCellStyle(cellStyle);
		cell.setCellValue(xAnyjaKNev);

		cell = row.createCell(colCount++);
		cell.setCellStyle(cellStyle);
		cell.setCellValue(xAnyjaUNev);

		cell = row.createCell(colCount++);
		cell.setCellStyle(cellStyle);
		cell.setCellValue(xAdoazon);

                   try (PDDocument document = new PDDocument())
   {
   PDPage singlePage = new PDPage(new PDRectangle(PDRectangle.A4.getHeight(), PDRectangle.A4.getWidth()));
//   PDPage singlePage = new PDPage();
   PDFont courierBoldFont = PDType1Font.COURIER_BOLD;
      document.addPage(singlePage);
      
       try (PDPageContentStream contentStream = new PDPageContentStream(document, singlePage)) {
           contentStream.beginText();
           contentStream.setFont(courierBoldFont, fontSize);
           contentStream.newLineAtOffset(innen, 450);
           contentStream.showText(xId);
           contentStream.newLineAtOffset(innen, -leading);
           contentStream.showText(xPdfNev);
           contentStream.newLineAtOffset(innen, -leading);
           contentStream.showText(xEloNev);
           contentStream.newLineAtOffset(innen, -leading);
           contentStream.showText(xCsNev);
           contentStream.newLineAtOffset(innen, -leading);
           contentStream.showText(xKNev);
           contentStream.newLineAtOffset(innen, -leading);
           contentStream.showText(xUNev);
           contentStream.newLineAtOffset(innen, -leading);
           contentStream.showText(xSzulCsNev);
           contentStream.newLineAtOffset(innen, -leading);
           contentStream.showText(xSzulKNev);
           contentStream.newLineAtOffset(innen, -leading);
           contentStream.showText(xSzulUNev);
           contentStream.newLineAtOffset(innen, -leading);
           contentStream.showText(xSzulHely);
           contentStream.newLineAtOffset(innen, -leading);
           contentStream.showText(xSzulIdo);
           contentStream.newLineAtOffset(innen, -leading);
           contentStream.showText(xAnyjaCsNev);
           contentStream.newLineAtOffset(innen, -leading);
           contentStream.showText(xAnyjaKNev);
           contentStream.newLineAtOffset(innen, -leading);
           contentStream.showText(xAnyjaUNev);
           contentStream.newLineAtOffset(innen, -leading);
           contentStream.showText(xAdoazon);
           contentStream.newLineAtOffset(innen, -leading);
           
           contentStream.endText();
           
           // Stream must be closed before saving document.
       }
      document.save(allomanyDir.concat(xPdfNev));
   }
   catch (IOException ioEx)
   {
      System.out.println(
         "Exception while trying to create simple document - " + ioEx);
   }

                
 }
}
            try (FileOutputStream outputStream = new FileOutputStream(allomanyDir.concat(xlsAllomany))) {
			workbook.write(outputStream);
		}		
//createHelloDocument(allomanyDir);

    }

    
    
    private void jKilepesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jKilepesActionPerformed
        System.exit(0);   // TODO add your handling code here:
    }//GEN-LAST:event_jKilepesActionPerformed

  

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AllomanyKivalaxto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AllomanyKivalaxto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AllomanyKivalaxto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AllomanyKivalaxto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AllomanyKivalaxto().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JFormattedTextField formattedText;
    private javax.swing.JButton jKilepes;
    private javax.swing.JButton jMegnyit;
    // End of variables declaration//GEN-END:variables
}
